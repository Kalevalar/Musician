<Ui xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.blizzard.com/wow/ui/">

	<!-- Instances for inheritance -->

	<Button name="MusicianUIPanelButtonInstance" inherits="UIPanelButtonTemplate" />

	<!-- Icon fonts -->

	<Font name="MusicianFontIconsNormal" inherits="GameFontNormal" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="12" virtual="true" />
	<Font name="MusicianFontIconsHighlight" inherits="GameFontHighlight" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="12" virtual="true" />
	<Font name="MusicianFontIconsDisable" inherits="GameFontDisable" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="12" virtual="true" />
	<Font name="MusicianFontIconsNormalLarge" inherits="GameFontNormalLarge" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="16" virtual="true" />
	<Font name="MusicianFontIconsHighlightLarge" inherits="GameFontHighlightLarge" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="16" virtual="true" />

	<!-- Percussion icon fonts -->

	<Font name="MusicianFontPercussionIconsNormal" inherits="GameFontNormal" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="14" virtual="true" />
	<Font name="MusicianFontPercussionIconsHighlight" inherits="GameFontHighlight" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="14" virtual="true" />
	<Font name="MusicianFontPercussionIconsDisable" inherits="GameFontDisable" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="14" virtual="true" />
	<Font name="MusicianFontPercussionIconsNormalLarge" inherits="GameFontNormalLarge" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="20" virtual="true" />
	<Font name="MusicianFontPercussionIconsHighlightLarge" inherits="GameFontHighlightLarge" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="20" virtual="true" />

	<!-- Dialog Window -->

	<Frame name="MusicianDialogTemplate" parent="UIParent" toplevel="true" enableMouse="true" setAllPoints="true" movable="true" hidden="true" clampedtoscreen="true" frameStrata="DIALOG" virtual="true">

		<Scripts>
			<OnLoad>self:RegisterForDrag("LeftButton")</OnLoad>
			<OnDragStart>self:StartMoving()</OnDragStart>
			<OnDragStop>self:StopMovingOrSizing()</OnDragStop>
			<OnShow>
				PlaySound(SOUNDKIT.IG_QUEST_LIST_OPEN)
			</OnShow>
			<OnHide>
				PlaySound(SOUNDKIT.IG_QUEST_LIST_CLOSE)
			</OnHide>
		</Scripts>

		<Anchors>
			<Anchor point="CENTER" x="0" y="0" />
		</Anchors>

		<Backdrop bgFile="Interface\DialogFrame\UI-DialogBox-Background" edgeFile="Interface\DialogFrame\UI-DialogBox-Border" tile="true">
			<BackgroundInsets>
				<AbsInset left="11" right="12" top="12" bottom="11" />
			</BackgroundInsets>
			<TileSize>
				<AbsValue val="32" />
			</TileSize>
			<EdgeSize>
				<AbsValue val="32" />
			</EdgeSize>
		</Backdrop>

		<Frames>
			<Button name="$parentCloseButton" parentKey="close" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="CENTER" relativePoint="TOPRIGHT">
						<Offset x="-7" y="-7" />
					</Anchor>
				</Anchors>
			</Button>
		</Frames>
	</Frame>

	<!-- Basic message dialog -->

	<Frame name="MusicianBasicMessageDialog" inherits="DialogBoxFrame">
		<Size>
			<AbsDimension x="384" y="128"/>
		</Size>
		<Layers>
			<Layer level="ARTWORK">
				<FontString parentKey="Text" inherits="GameFontNormalLarge" justifyH="CENTER" justifyV="CENTER" nonspacewrap="true">
					<Size>
						<AbsDimension x="360" y="75"/>
					</Size>
					<Anchors>
						<Anchor point="TOP" x="0" y="-8"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
	</Frame>

	<!-- Standard button with icon font template -->

	<Button name="MusicianIconButtonTemplate" inherits="UIPanelButtonTemplate" virtual="true">
		<NormalFont style="MusicianFontIconsNormal" />
		<HighlightFont style="MusicianFontIconsHighlight" />
		<DisabledFont style="MusicianFontIconsDisable" />
	</Button>

	<!-- Standard button with text and icon template -->

	<Button name="MusicianIconTextButtonTemplate" inherits="UIPanelButtonTemplate" virtual="true">
		<Layers>
			<Layer level="OVERLAY">
				<FontString name="$parentIcon" parentKey="icon" inherits="MusicianFontIconsNormal" justifyh="LEFT">
					<Size x="32" y="32" />
					<Anchors>
						<Anchor point="LEFT" relativePoint="LEFT" relativeTo="$parent" x="10" />
					</Anchors>
				</FontString>
			</Layer>
		</Layers>

		<ButtonText name="$parentText" parentKey="Text">
			<Anchors>
				<Anchor point="CENTER" x="8" />
			</Anchors>
		</ButtonText>

		<Scripts>
			<OnEnter>
				MusicianUIPanelButtonInstance:GetScript("OnEnter")(self, motion)
				if self:IsEnabled() then
					self.icon:SetFontObject(MusicianFontIconsHighlight)
				end
			</OnEnter>
			<OnLeave>
				MusicianUIPanelButtonInstance:GetScript("OnLeave")(self, motion)
				if self:IsEnabled() then
					self.icon:SetFontObject(MusicianFontIconsNormal)
				end
			</OnLeave>
			<OnEnable>
				MusicianUIPanelButtonInstance:GetScript("OnEnable")(self)
				self.icon:SetFontObject(MusicianFontIconsNormal)
			</OnEnable>
			<OnDisable>
				MusicianUIPanelButtonInstance:GetScript("OnDisable")(self)
				self.icon:SetFontObject(MusicianFontIconsDisable)
			</OnDisable>
			<OnMouseDown inherits="prepend">
				if self:IsEnabled() then
					if (not self.icon.oldPoint) then
						local point, relativeTo, relativePoint, x, y = self.icon:GetPoint(1)
						self.icon.oldPoint = point
						self.icon.oldX = x
						self.icon.oldY = y
					end
					local ox, oy = self:GetPushedTextOffset()
					self.icon:SetPoint(self.icon.oldPoint, self.icon.oldX + ox, self.icon.oldY + oy)
				end
			</OnMouseDown>
			<OnMouseUp inherits="prepend">
				if self:IsEnabled() then
					self.icon:SetPoint(self.icon.oldPoint, self.icon.oldX, self.icon.oldY)
				end
			</OnMouseUp>
		</Scripts>
	</Button>

	<!-- Standard button with LED -->

	<Button name="MusicianLEDTextButtonTemplate" inherits="UIPanelButtonTemplate" virtual="true">
		<Layers>
			<Layer level="OVERLAY">
				<Texture parentKey="ledOff" name="$parentLedOff" file="Interface\AddOns\Musician\ui\textures\led-off">
					<Size x="16" y="16" />
					<Anchors>
						<Anchor point="LEFT" relativePoint="LEFT" relativeTo="$parent" x="6" />
					</Anchors>
				</Texture>
				<Texture parentKey="led" name="$parentLedOn" file="Interface\AddOns\Musician\ui\textures\led-on">
					<Size x="16" y="16" />
					<Anchors>
						<Anchor point="CENTER" relativePoint="CENTER" relativeTo="$parentLedOff" />
					</Anchors>
				</Texture>
			</Layer>
		</Layers>

		<ButtonText name="$parentText" parentKey="Text">
			<Anchors>
				<Anchor point="CENTER" x="6" />
			</Anchors>
		</ButtonText>

		<Scripts>
			<OnLoad inherits="append">
				self.ledOff:SetDrawLayer("OVERLAY", 1)
				self.led:SetDrawLayer("OVERLAY", 2)
				self.led:SetAlpha(0)
				self.oldPoint = { self.ledOff:GetPoint() }
			</OnLoad>
			<OnMouseDown>
				MusicianUIPanelButtonInstance:GetScript("OnMouseDown")(self, button)
				if self:IsEnabled() then
					local point, relativeTo, relativePoint, x, y = unpack(self.oldPoint)
					local ox, oy = self:GetPushedTextOffset()
					self.ledOff:SetPoint(point, relativeTo, relativePoint, x + ox, y + oy)
				end
			</OnMouseDown>
			<OnMouseUp>
				MusicianUIPanelButtonInstance:GetScript("OnMouseUp")(self, button)
				if self:IsEnabled() then
					self.ledOff:SetPoint(unpack(self.oldPoint))
				end
			</OnMouseUp>
		</Scripts>
	</Button>

	<!-- Button with icon and progress bar -->

	<Button name="MusicianIconTextProgressBarButtonTemplate" inherits="MusicianIconTextButtonTemplate" virtual="true">
		<Layers>
			<Layer level="OVERLAY">
				<Texture name="$parentProgressBar" parentKey="progressBar" alphaMode="ADD">
					<Size x="0" y="1"/>
					<Anchors>
						<Anchor point="BOTTOMLEFT" x="5" y="3" relativePoint="BOTTOMLEFT" />
					</Anchors>
					<Color a="1" r="1" g="0.82" b="0" />
				</Texture>
			</Layer>
		</Layers>
		<OnLoad>
			self.progressBar:SetWidth(self:GetWidth())
		</OnLoad>
	</Button>

	<!-- Dropdown menu with tooltip -->

	<Frame name="MusicianDropDownMenuTooltipTemplate" inherits="UIDropDownMenuTemplate" virtual="true">
		<Scripts>
			<OnEnter>
				if(self.tooltipText ~= nil) then
					GameTooltip_AddNewbieTip(self, self.tooltipText, 1.0, 1.0, 1.0, self.newbieText);
				end
			</OnEnter>
			<OnLeave>
				if(self.tooltipText ~= nil) then
					GameTooltip:Hide();
				end
			</OnLeave>
		</Scripts>
	</Frame>

	<!-- Instrument dropdown -->

	<Frame name="MusicianInstrumentDropdownTemplate" inherits="MusicianDropDownMenuTooltipTemplate" virtual="true">
		<Scripts>
			<OnLoad>
				UIDropDownMenu_SetWidth(self, 115)
				local dropdown = self

				dropdown.value = nil

				dropdown.UpdateValue = function(value)
					local originalMidiId = value
					local instrumentId = Musician.MIDI_INSTRUMENT_MAPPING[originalMidiId]
					local midiId = Musician.INSTRUMENTS[instrumentId].midi
					local instrumentName = Musician.Msg.INSTRUMENT_NAMES[instrumentId]
					dropdown.value = midiId
					dropdown.midiId = midiId
					dropdown.instrumentId = instrumentId

					if Musician.INSTRUMENTS[instrumentId].color ~= nil then
						local r, g, b = unpack(Musician.INSTRUMENTS[instrumentId].color)
						instrumentName = Musician.Utils.GetColorCode(unpack(Musician.INSTRUMENTS[instrumentId].color)) .. instrumentName .. "|r"
					end

					UIDropDownMenu_SetText(dropdown, instrumentName)
				end

				dropdown.SetValue = function(value)
					dropdown.UpdateValue(value)

					if dropdown.OnChange then
						dropdown.OnChange(dropdown.midiId, dropdown.instrumentId)
					end
				end

				dropdown.OnClick = function(self, arg1, arg2, checked)
					dropdown.SetValue(arg1)
				end

				dropdown.GetItems = function(frame, level, menuList)
					local info = UIDropDownMenu_CreateInfo()
					info.func = dropdown.OnClick

					local instrumentId
					for _, instrumentId in pairs(Musician.INSTRUMENTS_AVAILABLE) do
						local midiId = Musician.INSTRUMENTS[instrumentId].midi
						info.text = Musician.Msg.INSTRUMENT_NAMES[instrumentId]
						info.arg1 = midiId
						info.checked = dropdown.value == midiId
						if Musician.INSTRUMENTS[instrumentId].color ~= nil then
							info.colorCode = Musician.Utils.GetColorCode(unpack(Musician.INSTRUMENTS[instrumentId].color))
						end
						UIDropDownMenu_AddButton(info)
					end
				end

				UIDropDownMenu_Initialize(dropdown, dropdown.GetItems)
			</OnLoad>
		</Scripts>
	</Frame>

</Ui>